import jsPDF from 'jspdf';

export function exportToPDF(sections: any[], solveResult: any, state: any) {
  const doc = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4' });

  // Title
  doc.setFontSize(20);
  doc.setTextColor(59, 78, 168); // Primary color approximation
  doc.text('TimeWeaver â€” Weekly Timetable', 15, 20);

  // Subtitle
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text(`Generated on ${new Date().toLocaleDateString()}`, 15, 28);
  doc.text(`Total Sections: ${sections.length} | Time Slots Used: ${solveResult.colorsCount}`, 15, 33);

  // Helper functions
  const getSubjectName = (id: string) => {
    return state.subjects.find((s: any) => s.id === id)?.name || 'Unknown';
  };

  const getTeacherName = (id: string) => {
    return state.teachers.find((t: any) => t.id === id)?.name || 'Unknown';
  };

  const getRoomName = (id: string) => {
    return state.rooms.find((r: any) => r.id === id)?.name || 'Unknown';
  };

  const getGroupName = (id: string) => {
    return state.groups.find((g: any) => g.id === id)?.name || 'Unknown';
  };

  // Generate grid
  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
  const periods = 6;
  const cells: Array<{ day: string; period: number }> = [];
  for (let d = 0; d < days.length; d++) {
    for (let p = 1; p <= periods; p++) {
      if (p === 3) continue; // Skip break
      cells.push({ day: days[d], period: p });
    }
  }

  const colorToCell: Record<number, { day: string; period: number }> = {};
  for (let c = 0; c < solveResult.colorsCount; c++) {
    colorToCell[c] = cells[c % cells.length];
  }

  const grid: Record<string, any[]> = {};
  sections.forEach((s) => {
    const c = solveResult.colorOf[s.id];
    const mapped = colorToCell[c];
    if (!mapped) return;
    const key = `${mapped.day}_${mapped.period}`;
    grid[key] = grid[key] || [];
    grid[key].push(s);
  });

  // Table
  let y = 45;
  const cellWidth = 50;
  const cellHeight = 20;
  const startX = 15;

  // Header
  doc.setFillColor(240, 242, 245);
  doc.rect(startX, y, cellWidth, cellHeight, 'F');
  doc.setFontSize(9);
  doc.setTextColor(0, 0, 0);
  doc.text('Time / Day', startX + 3, y + 7);

  days.forEach((day, idx) => {
    const x = startX + cellWidth + idx * cellWidth;
    doc.setFillColor(240, 242, 245);
    doc.rect(x, y, cellWidth, cellHeight, 'F');
    doc.text(day.substring(0, 3), x + 15, y + 7);
  });

  y += cellHeight;

  // Rows
  const timeSlots = ['8:00-9:00', '9:00-10:00', 'Break', '11:00-12:00', '1:00-2:00', '2:00-4:00'];

  for (let p = 0; p < periods; p++) {
    doc.setFillColor(250, 250, 250);
    doc.rect(startX, y, cellWidth, cellHeight, 'F');
    doc.setFontSize(8);
    if (p === 2) {
      doc.text('Break', startX + 3, y + 10);
      // Draw break cells for all days
      days.forEach((day, dIdx) => {
        const x = startX + cellWidth + dIdx * cellWidth;
        doc.rect(x, y, cellWidth, cellHeight);
        doc.setFontSize(8);
        doc.text('Break', x + 10, y + 10);
      });
      y += cellHeight;
      continue;
    }
    doc.text(`P${p + 1}`, startX + 3, y + 6);
    doc.text(timeSlots[p], startX + 3, y + 12);
    days.forEach((day, dIdx) => {
      const x = startX + cellWidth + dIdx * cellWidth;
      const key = `${day}_${p + 1}`;
      const items = grid[key] || [];
      doc.rect(x, y, cellWidth, cellHeight);
      if (items.length > 0) {
        doc.setFontSize(7);
        let textY = y + 5;
        items.forEach((item) => {
          // Use correct keys for section fields
          const subject = getSubjectName(item.subject_id);
          const teacher = getTeacherName(item.teacher_id);
          const room = getRoomName(item.room_id);
          doc.text(subject.substring(0, 15), x + 2, textY);
          textY += 4;
          doc.text(`${teacher.substring(0, 12)} | ${room}`, x + 2, textY);
          textY += 5;
        });
      }
    });
    y += cellHeight;
  }

  // Footer
  doc.setFontSize(8);
  doc.setTextColor(150, 150, 150);
  doc.text('Generated by TimeWeaver - Intelligent Timetable Scheduling', 15, 200);

  // Save
  doc.save(`timeweaver_timetable_${new Date().toISOString().split('T')[0]}.pdf`);
}
